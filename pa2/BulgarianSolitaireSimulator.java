/**
 * This function implements a Bulgarian Solitaire Simulation.
 * It keeps taking input from the user until the input meets the requirements.
 * The program can be run in different modes: single step and userConfig.
 * When single step (-s) is used, each time will show only one line and it requires user to type return to continue;
 * when single step is not used, all the steps will be shown at once.
 * When userConfig is used, user can input any possible values; 
 * otherwise, a random initial input will be generated by the computer 
 */

import java.util.Scanner;
import java.util.ArrayList;
import java.util.regex.Pattern;

public class BulgarianSolitaireSimulator {

    public static void main(String[] args) {

        boolean singleStep = false;	// check if single step is used
        boolean userConfig = false;	// check if userConfig is used
        boolean inputCheck = true; 	// check if input value is valid

        for (int i = 0; i < args.length; i++) {
            if (args[i].equals("-u")) {
                userConfig = true;
            } else if (args[i].equals("-s")) {
                singleStep = true;
            }
        }

        // case of userConfig is used
        if (userConfig) {
            System.out.println("Number of total cards is 45");
            System.out.println("You will be entering the initial configuration of the cards (i.e., how many in each pile).");
            System.out.println("Please enter a space-separated list of positive integers followed by newline:");
            
            Scanner sc1 = new Scanner(System.in);
            String str1 = sc1.nextLine();
            Scanner sc2 = new Scanner(str1);
            ArrayList<Integer> list = new ArrayList<Integer>();

            inputCheck = BulgarianSolitaireSimulator.inputcheck(sc2, list); // Check if the input values meet the requirements

            // Check if the input values meet the requirements
            while (!inputCheck) {
                System.out.println("ERROR: Each pile must have at least one card and the total number of cards must be 45");
                System.out.println("Please enter a space-separated list of positive integers followed by newline:");

                sc1 = new Scanner(System.in);
                str1 = sc1.nextLine();
                sc2 = new Scanner(str1);
                list = new ArrayList<Integer>();
                inputCheck = BulgarianSolitaireSimulator.inputcheck(sc2, list); // Check if the input values meet the requirements

			}

            SolitaireBoard board = new SolitaireBoard(list); // construct a new Solitaire Board object "board"
            
            // check if singleStep is used
            if (singleStep) {
                runSingle(board);
			} else {
                run(board);
            }

        }

        // case of userConfig is not used
        else if (singleStep) {	// check if singleStep is used
            SolitaireBoard board = new SolitaireBoard();
            runSingle(board);
        } else {
            SolitaireBoard board = new SolitaireBoard();
            run(board);
        }

    }

    // <add private static methods here>
	
    /*
	 * define an inputcheck class to check if the input is valid:
	 * 1. all input values are positive integers between [1,45]
	 * 2. the sum of all input values should equal to CARD_TOTAL=45
	 */
    public static boolean inputcheck(Scanner sc, ArrayList<Integer> list) {
        boolean inputCheck = true;
        Pattern pattern = Pattern.compile("^([1-9][0-9]*)$"); // the pattern of positive integer
        int sumInput = 0;	//total cards in the array

        while (sc.hasNext()) {
            String str2 = sc.next();
            inputCheck = pattern.matcher(str2).matches(); // check if the input value is positive integer
            if (!inputCheck) {// if the input value does not match the positive integer pattern, then break the while-loop
                break;
            }
            if (Integer.parseInt(str2) > SolitaireBoard.CARD_TOTAL) {// if the input value is greater than 45, break the the while-loop
                inputCheck = false;
                break;
            }

            list.add(Integer.parseInt(str2)); // store typed values into an array list
            sumInput += Integer.parseInt(str2); // update the sum of cards in the array
        }
		
        if (sumInput != SolitaireBoard.CARD_TOTAL) { // if the total card number is not CARD_TOTAL, return false
            inputCheck = false;
        }
        return inputCheck;
    }

    /*
	 * define a run class for print each iteration result under "-u" circumstance
	 */
    private static void run(SolitaireBoard board) {
        System.out.println("Initial Configuration: " + board.configString());

        int step = 1;
        while (!board.isDone()) {
            board.playRound();
            System.out.println("[" + (step++) + "] Current Configuration: " + board.configString());
        }
        System.out.println("Done!");
    }

    /*
	 * define a runSingle class for print each iteration result under "-s"
	 * circumstance
	 */
    private static void runSingle(SolitaireBoard board) {
        System.out.println("Initial Configuration: " + board.configString());

        int step = 1;	// use "step" to count step number
        while (!board.isDone()) {
            System.out.print("<Type return to continue>");
            Scanner sc = new Scanner(System.in);
            String str = sc.nextLine();		// type return to continue
            
            board.playRound();
            System.out.println("[" + (step++) + "] Current Configuration: " + board.configString());
            
        }
        System.out.println("Done!");
        
    }

}
